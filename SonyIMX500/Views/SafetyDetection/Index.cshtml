@section scripts {
    <script type="text/javascript" src="/js/SonyApi.js"></script>
    <script type="text/javascript" src="/js/Token.js"></script>
    <script type="text/javascript" src="/js/BlobStorage.js"></script>
    <script type="text/javascript" src="/js/SafetyDetection.js"></script>
@*    <script type="text/javascript" src="https://MomentJS.com/downloads/moment.js"></script>
    <script type="text/javascript" src="https://MomentJS.com/downloads/moment-with-locales.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.2/chart.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>
*@
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.2/chart.min.js"></script>
}
<body>
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                    <h3>Sony IMX500 Hands-on Lab Custom Vision</h3>
            </div>
        </div>
    </section>
    <!-- Main content -->
    <div id="loader" class="loading" style="display:none"></div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 col-sm-12">
                <div class="card card-primary card-tabs">
                    <div class="card-header p-0 pt-1">
                        <ul class="nav nav-tabs" id="tab-main" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="tab-setup-label" data-toggle="pill" href="#tabs-setup" role="tab" aria-controls="tabs-setup" aria-selected="true">Setup</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="tab-telemetry-label" data-toggle="pill" href="#tab-telemetry" role="tab" aria-controls="tab-telemetry" aria-selected="false">Telemetry/Events</a>
                            </li>
                        </ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content" id="tab-main">
                            <div class="tab-pane fade show active" id="tabs-setup" role="tabpanel" aria-labelledby="tab-setup-label">
                                <div class="row">
                                    <div class="col-md-3" height="640" width="640" style="min-width:640px; max-width:640px;min-height:640px">
                                        <div class="container loader-parent"  height="640" width="640">
                                            <div class="row justify-content-center align-items-center">
                                                <canvas id="captureImageCanvasZoneOverlay" height="640" width="640" style="max-width:640px;max-height:640px;z-index:300"></canvas>
                                                <canvas id="captureImageCanvasOverlay"     height="640" width="640" style="max-width:640px;z-index:200;position:absolute"></canvas>
                                                <canvas id="captureImageCanvas"            height="640" width="640" style="z-index:100;position:absolute"></canvas>
                                            </div>
                                            <div id="captureImageCanvasLoaderWrapper"  class="canvasLoaderWrapper" height="640" width="640" style="display:none">
                                                <div id="canvasLoader">
                                                </div>
                                                <div class="loading-text canvasLoaderText">Waiting for an image. This can take a few minutes.</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div id="accordion">
                                            <div class="card card-primary">
                                                <div class="card-header">
                                                    <h4 class="card-title w-100">
                                                        <a class="d-block w-100" data-toggle="collapse" href="#accordionCaptureImage">
                                                            Step 1 : Capture Image
                                                        </a>
                                                    </h4>
                                                </div>
                                                <div id="accordionCaptureImage" class="collapse" data-parent="#accordion">
                                                    <div class="card-body">
                                                        <div class="info-box">
                                                            <div class="info-box-content">
                                                                <label for="captureDeviceIdList">Device ID</label>
                                                                <div class="form-group">
                                                                    <div class="input-group">
                                                                        <select name="captureDeviceIdList" id="captureDeviceIdList" class="form-control custom-select"></select>
                                                                        <div class="input-group-append">
                                                                            <button type="button" class="btn btn-success" style="min-width:1em" id="captureDeviceIdListRefreshBtn">
                                                                                <i class="fas fa-sync btn-fa" style="margin:0"></i>
                                                                            </button>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="form-group">
                                                                    <label for="captureModelIdList">Model ID</label>
                                                                    <select name="captureModelIdList" id="captureModelIdList" class="form-control custom-select" disabled></select>
                                                                </div>
                                                                <div class="form-group" hidden>
                                                                    <label for="divTrigger">Trigger</label>
                                                                    <div id="divTrigger" >
                                                                        <div class="btn-group btn-group-toggle" data-toggle="buttons">
                                                                            <label class="btn btn-info" style="min-width:8em">
                                                                                <input type="radio" name="imageNotifictionTypeList" id="imageNotifictionTypeList_Telemetry" autocomplete="off" value="telemetry">Telemetry
                                                                            </label>
                                                                            <label class="btn btn-info active" style="min-width:8em">
                                                                                <input type="radio" name="imageNotifictionTypeList" id="imageNotifictionTypeList_CosmosDb" autocomplete="off" value="cosmosDb" checked>Cosmos DB  
                                                                            </label>
                                                                            <label class="btn btn-info" style="min-width:8em">
                                                                                <input type="radio" name="imageNotifictionTypeList" id="imageNotifictionTypeList_Telemetry_Blob" autocomplete="off" value="blob">Blob Storage
                                                                            </label>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="card-footer">
                                                        <div class="footer-div">
                                                            <button type="button" class="btn btn-success" id="captureImageBtn" disabled>
                                                                <i class="fas fa-camera btn-fa"></i>Capture
                                                            </button>
                                                            <div class="info-box-text vertical-center" id='captureImageBtnResult'>Place Holder : To be deleted</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card card-primary">
                                                <div class="card-header">
                                                    <h4 class="card-title w-100">
                                                        <a class="d-block w-100" data-toggle="collapse" href="#accordionSpecifyZone">
                                                            Step 2 : Specify Zone
                                                        </a>
                                                    </h4>
                                                </div>
                                                <div id="accordionSpecifyZone" class="collapse" data-parent="#accordion">
                                                    <div class="card-body">
                                                        <div class="info-box">
                                                            <div class="info-box-content">
                                                                <div class="row">
                                                                    <div class="col-md-auto">
                                                                        <div style="text-align:right">
                                                                            <strong>Top Left</strong>
                                                                        </div>
                                                                        <div style="text-align:right">
                                                                            <strong >Bottom Right</strong>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-4">
                                                                        <div>
                                                                            <pre class="pre-inline">(x:<pre class="pre-inline" id="region_x"></pre>, y:<pre class="pre-inline" id="region_y"></pre>)</pre>
                                                                        </div>
                                                                        <div>
                                                                            <pre class="pre-inline">(x:<pre class="pre-inline" id="region_w"></pre>, y:<pre class="pre-inline" id="region_h"></pre>)</pre>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card card-primary">
                                                <div class="card-header">
                                                    <h4 class="card-title w-100">
                                                        <a class="d-block w-100" data-toggle="collapse" href="#accordionStartInference">
                                                            Step 3 : Start Inference
                                                        </a>
                                                    </h4>
                                                </div>
                                                <div id="accordionStartInference" class="collapse" data-parent="#accordion">
                                                    <div class="card-body">
                                                        <div class="info-box">
                                                            <div class="info-box-content">
                                                                <div class="row div-Horizontal-Input" style="justify-content:left;width:100%">
                                                                    <label for="captureImageCountSlider" style="margin-right:0.5em; width:11em">Number of images : </label>
                                                                    <div class="slider-blue" style="margin:0 1em 0 1em;width:50%; min-width:20%">
                                                                        <input type="range" class="slider" min="0" max="10000" value="5" step="1" id="captureImageCountSlider" style="width:100%">
                                                                    </div>
                                                                    <span><span id="captureImageCountSliderLabel"></span><span> images</span></span>
                                                                </div>
                                                                <div class="row div-Horizontal-Input" style="justify-content:left;width:100%">
                                                                    <label for="captureThresholdSlider" style="margin-right:0.5em; width:11em">Threashold (percent) : </label>
                                                                    <div class="slider-blue" style="margin:0 1em 0 1em;width:50%; min-width:20%">
                                                                        <input type="range" class="slider" min="0" max="100" value="80" step="1" id="captureThresholdSlider" style="width:100%">
                                                                    </div>
                                                                    <span> <span id="captureThresholdSliderLabel"></span><span> %</span></span>
                                                                </div>
                                                                <div class="row div-Horizontal-Input" style="justify-content:left;width:100%">
                                                                    <label for="captureFrequencySlider" style="margin-right:0.5em; width:11em">Frequency (seconds) : </label>
                                                                    <div class="slider-blue" style="margin:0 1em 0 1em;width:50%; min-width:20%">
                                                                        <input type="range" class="slider" min="10" max="600" value="10" step="1" id="captureFrequencySlider" style="width:100%">
                                                                    </div>
                                                                    <span id="captureFrequencySliderLabel"></span><span>&nbsp;sec</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="card-footer">
                                                        <div class="footer-div">
                                                            <button type="button" class="btn btn-success btn-icon" id="captureStartInferenceBtn" disabled>
                                                                <i class="fas fa-play btn-fa"></i>Start
                                                            </button>
                                                            <button type="button" class="btn btn-success btn-icon" id="captureStopInferenceBtn" disabled>
                                                                <i class="fas fa-stop btn-fa"></i>Stop
                                                            </button>
                                                            <div class="info-box-text vertical-center" id="captureStartInferenceBtnResult">Place Holder : To be deleted</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card card-primary">
                                                <div class="card-header">
                                                    <h4 class="card-title w-100">
                                                        <a class="d-block w-100" data-toggle="collapse" href="#accordionSaveParameter">
                                                            Step 4 : Save Parameter
                                                        </a>
                                                    </h4>
                                                </div>
                                                <div id="accordionSaveParameter" class="collapse" data-parent="#accordion">
                                                    <div class="card-body">
                                                        <div class="div-Button-Right">
                                                            <button type="button" class="btn btn-success" id="captureSaveParameterBtn" disabled>
                                                                <i class="fas fa-play btn-fa"></i>Save
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="tab-telemetry" role="tabpanel" aria-labelledby="tab-telemetry-label">
                                <div class="info-box" style="margin-bottom:0.5em">
                                    <div class="info-box-content">
                                        <div class="form-group">
                                            <div class="row div-Horizontal-Input" style="justify-content:left;width:100%">
                                                <label for="safetyDetectionDeviceIdList" style="margin-right:0.5em; width:11em;justify-content:right">Select Device ID : </label>
                                                <div class="input-group" style="min-width:15em; width:30%">
                                                    <select name="safetyDetectionDeviceIdList" id="safetyDetectionDeviceIdList" class="form-control custom-select"></select>
                                                    <div class="input-group-append">
                                                        <button type="button" class="btn btn-success" style="min-width:1em" id="safetyDetectionDeviceIdListRefreshBtn">
                                                            <i class="fas fa-sync btn-fa" style="margin:0"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="row div-Horizontal-Input" style="justify-content:left;width:100%">
                                                <label for="safetyDetectionModelIdList" style="margin-right:0.5em; width:11em;justify-content:right">Select Model ID : </label>
                                                <select name="safetyDetectionModelIdList" id="safetyDetectionModelIdList" class="form-control custom-select" style="min-width:15em; width:30%" disabled></select>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="row div-Horizontal-Input" style="justify-content:left;width:100%">
                                                <label for="safetyDetectionImageCountSlider" style="margin-right:0.5em; width:11em;justify-content:right">Number of images : </label>
                                                <div class="slider-blue" style="margin:0 1em 0 0;width:50%; min-width:20%">
                                                    <input type="range" class="slider" min="0" max="10000" value="50" step="1" id="safetyDetectionImageCountSlider" style="width:100%">
                                                </div>
                                                <span><span id="safetyDetectionImageCountSliderLabel"></span><span> images</span></span>
                                            </div>
                                        </div>
                                        <div class="row div-Horizontal-Input" style="justify-content:left;width:100%">
                                            <label for="safetyDetectionThresholdSlider" style="margin-right:0.5em; width:11em;justify-content:right">Threashold (percent) : </label>
                                            <div class="slider-blue" style="margin:0 1em 0 0;width:50%; min-width:20%">
                                                <input type="range" class="slider" min="0" max="100" value="80" step="1" id="safetyDetectionThresholdSlider" style="width:100%">
                                            </div>
                                            <span> <span id="safetyDetectionThresholdSliderLabel"></span><span>&nbsp;%</span></span>
                                        </div>
                                        <div class="row div-Horizontal-Input" style="justify-content:left;width:100%">
                                            <label for="safetyDetectionFrequencySlider" style="margin-right:0.5em; width:11em;justify-content:right">Frequency (seconds) : </label>
                                            <div class="slider-blue" style="margin:0 1em 0 0;width:50%; min-width:20%">
                                                <input type="range" class="slider" min="1" max="600" value="10" step="1" id="safetyDetectionFrequencySlider" style="width:100%">
                                            </div>
                                            <span id="safetyDetectionFrequencySliderLabel"></span><span>&nbsp;sec</span>
                                        </div>
                                        <div class="btnStatusDiv">
                                            <button type="button" class="btn btn-success" id="startSafetyDetectionWithImageBtn" disabled>
                                                <i class="fas fa-play btn-fa"></i>Start Inference
                                            </button>
@*                                            <span>
                                                <input type="checkbox" id="safetyDetectionImageCb" checked>
                                                <label for="safetyDetectionImageCb" style="margin-right:0.5em; width:11em;justify-content:right">Upload Images </label>
                                            </span>*@
                                            <button type="button" class="btn btn-success" id="startSafetyDetectionBtn" disabled>
                                                <i class="fas fa-play btn-fa"></i>Start Inference (No Image)
                                            </button>
                                            <button type="button" class="btn btn-success" id="stopSafetyDetectionBtn" disabled>
                                                <i class="fas fa-stop btn-fa"></i>Stop Inference
                                            </button>
                                            <div class="info-box-text vertical-center" id='startSafetyDetectionBtnResult'>Place Holder : To be deleted</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="info-box">
                                    <div class="info-box-content">
                                        <div class="row">
                                            <div class="col-md-3" height="320" width="320" style="min-width:320px; max-width:320px;min-height:320px">
                                                <div class="container loader-parent" height="320" width="320" >
                                                    <div class="row justify-content-center align-items-center">
                                                        <canvas id="safetyDetectionCanvasZoneOverlay" height="320" width="320" style="max-width:320px;max-height:320px;z-index:300"></canvas>
                                                        <canvas id="safetyDetectionCanvasOverlay"     height="320" width="320" style="max-width:320px;z-index:200;position:absolute"></canvas>
                                                        <canvas id="safetyDetectionCanvas"            height="320" width="320" style="z-index:100;position:absolute"></canvas>
                                                    </div>
                                                    <div id="safetyDetectionCanvasLoaderWrapper" class="canvasLoaderWrapper" height="320" width="320" style="display:none">
                                                        <div id="canvasLoader">
                                                        </div>
                                                        <div class="loading-text canvasLoaderText">Waiting for an image. This can take a few minutes.</div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md" style="min-width:60vw">
                                                <div class="chart">
                                                    <canvas id="lineChart" style="min-height: 330px; height: 330px; max-height: 330px;width:auto"></canvas>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        let hubConnection;
        let start;
        let currentDeviceId = undefined;
        let currentModelId = undefined;
        let captureThresholdSlider = document.getElementById("captureThresholdSlider");
        let captureThresholdSliderLabel = document.getElementById("captureThresholdSliderLabel");
        let captureFrequencySlider = document.getElementById("captureFrequencySlider");
        let captureFrequencySliderLabel = document.getElementById("captureFrequencySliderLabel");
        let captureImageCountSlider = document.getElementById("captureImageCountSlider");
        let captureImageCountSliderLabel = document.getElementById("captureImageCountSliderLabel");
        let safetyDetectionImageCountSlider = document.getElementById("safetyDetectionImageCountSlider");
        let safetyDetectionImageCountLabel = document.getElementById("safetyDetectionImageCountSliderLabel");
        let safetyDetectionThresholdSlider = document.getElementById("safetyDetectionThresholdSlider");
        let safetyDetectionThresholdLabel = document.getElementById("safetyDetectionThresholdSliderLabel");
        let safetyDetectionFrequencySlider = document.getElementById("safetyDetectionFrequencySlider");
        let safetyDetectionFrequencyLabel  = document.getElementById("safetyDetectionFrequencySliderLabel");
        let thresholdSliderHandler;
        let imageCountSliderHandler;
        let safetyDetectionFrequencySpinnerHandler;
        let safetyDetectionThresholdSliderHandler;
        let safetyDetectionImageCountSliderHandler;
        let frequencySpinnerHandler;
        let lineChart;
        let currentThreshold = 0.8;
        let isSafetyDetectionRunning = false;
        let isPendingCapture = false;
        let rect_zone = [-1, -1, -1, -1];
        var capture_photo_url = undefined;

        let chartOptions = {
            showLines: true,
            responsive: true,
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    type: 'timeseries',
                }],
                yAxes: {
                    type: 'linear',
                    min: 0,
                    max: 1,
                    display: true,
                    gridLines : {
                        display : true,
                    },
                    ticks: {
                        display: true,
                        count: 10,
                        stepSize:0.1,
                        callback: function(val, index) {
                            //return index % 2 === 0 ? val : '';
                            return `${(val * 100).toFixed(0)}%`;
                        },
                    }
                }
            },
            plugins: {
                legend: false
            }
        }

        var chartData = {
                labels: [],
                datasets: [
                    {
                        label: "Inference Results",
                        fill: false,
                        lineTension: 0.0,
                        backgroundColor: "rgba(75,192,192,0.4)",
                        borderColor: "rgba(75,192,192,1)",
                        borderCapStyle: 'butt',
                        borderDash: [],
                        borderDashOffset: 0.0,
                        borderJoinStyle: 'miter',
                        pointBorderColor: "rgba(75,192,192,1)",
                        pointBackgroundColor: "#fff",
                        pointBorderWidth: 1,
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: "rgba(75,192,192,1)",
                        pointHoverBorderColor: "rgba(220,220,220,1)",
                        pointHoverBorderWidth: 2,
                        pointRadius: 5,
                        pointHitRadius: 10,
                        data: [],
                    }
                ]
            };

        $(document).ready(function() {

            console.debug("Safety Detection : document.Ready");
            document.getElementById('nav-link-home').classList.remove('active');
            document.getElementById('nav-link-sd').classList.add('active');

            // Need more work.  Ok for now..
            initSafetyDetectionCanvas('safetyDetectionCanvasOverlay', 'safetyDetectionCanvas');
            initCaptureCanvas('captureImageCanvasZoneOverlay', 'captureImageCanvasOverlay', 'captureImageCanvas');
            ClearCaptureCanvas();

            hubConnection = new signalR.HubConnectionBuilder()
                .withUrl("telemetryHub")
                .configureLogging(signalR.LogLevel.Debug)
                .build();

            hubConnection.on('DeviceTelemetry', function(payload) {
                printTime("Telemetry");
                processTelemetryForChart(payload, lineChart, currentThreshold);
                processTelemetryMessage(payload);
            });

            hubConnection.on('CosmosDb', function(payload) {
                printTime("CosmosDb");
                var jsonData = JSON.parse(payload);
                processCosmosDbMessage(payload, currentThreshold);
            });

            hubConnection.on('blobTrigger', function(payload) {
                printTime("blobTrigger");
                var jsonData = JSON.parse(payload);
                processBlobMessage(payload);
            });

            hubConnection.start()
                .then(() => console.log('SignalR connected!'))
                .catch(console.error);

            var lineChartCanvas = $('#lineChart').get(0).getContext('2d')

            lineChart = new Chart(lineChartCanvas, {
                type: 'line',
                data: chartData,
                options: chartOptions
            });

            if (document.cookie.length > 0)
            {
                var settings = parseCookie(document.cookie);

                if (settings.SafetyZoneDevId != undefined)
                {
                    currentDeviceId = settings.SafetyZoneDevId;
                }

                if (settings.SafetyZoneModelId != undefined)
                {
                    currentModelId = settings.SafetyZoneModelId;
                }

                if (settings.SafetyZoneRect != undefined)
                {
                    var json = JSON.parse(settings.SafetyZoneRect);

                    for (var i = 0; i < json.length; i++)
                    {
                        rect_zone[i] = parseInt(json[i]);
                    }
                }

                if (settings.SafetyZoneThreshold != undefined)
                {
                    captureThresholdSlider.value = settings.SafetyZoneThreshold;
                    safetyDetectionThresholdSlider.value = settings.SafetyZoneThreshold;
                    currentThreshold = parseInt(settings.SafetyZoneThreshold) / 100;
                }

                if (settings.capture_photo_url != undefined)
                {
                    capture_photo_url = settings.capture_photo_url;
                }

                if (currentDeviceId != undefined && currentModelId != undefined)
                {
                    // Set up UI with initial values
                    SetDeviceLists(currentDeviceId, currentModelId);
                }
               
                if (currentDeviceId != undefined && currentModelId != undefined && capture_photo_url != undefined && rect_zone[0] != -1 && rect_zone[1] != -1 && rect_zone[2] != -1 && rect_zone[3] != -1)
                {
                    
                    //$('#accordionCaptureImage').collapse('toggle');
                    SetCaptureCanvas(currentDeviceId, capture_photo_url, rect_zone);
                }
                console.debug(`Dev   : ${currentDeviceId}`);
                console.debug(`Model : ${currentModelId}`);
                console.debug(`Ratio : ${ratio_x}:${ratio_y}`);
                console.debug(`Url   : ${capture_photo_url}`);
                console.debug(`Rect  : ${rect_zone[0]}, ${rect_zone[1]}, ${rect_zone[2]}, ${rect_zone[3]}`);
            }

            captureThresholdSliderLabel.innerHTML = captureThresholdSlider.value;
            captureFrequencySliderLabel.innerHTML = captureFrequencySlider.value;
            captureImageCountSliderLabel.innerHTML = captureImageCountSlider.value;
            safetyDetectionThresholdLabel.innerHTML = safetyDetectionThresholdSlider.value;
            safetyDetectionFrequencyLabel.innerHTML = safetyDetectionFrequencySlider.value;
            safetyDetectionImageCountLabel.innerHTML = safetyDetectionImageCountSlider.value;
        });

        //
        // Accordion
        //
        $('#accordionCaptureImage').on('show.bs.collapse', async function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            var resultElementId = 'captureImageBtnResult';
            var deviceListId = 'captureDeviceIdList';
            
            if (document.getElementById(deviceListId).length == 0)
            {
                // List empty.  Gather device list.
                
                toggleLoader(false);

                await GetDevices(deviceListId, true, false, 'Select Device', '0', resultElementId)
                    .then((response) => { 
                        if (response == false) {
                            // handle error?
                        }
                    })
                    .catch((err) => {
                    })
                    .finally(() => {
                        toggleLoader(true);
                    })
            }
        })

        $('#accordionSpecifyZone').on('show.bs.collapse', function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            enableDisableMouseEvent(true);

            $('#region_x').html(rect_zone[0].toString().padStart(3, ' '));
            $('#region_y').html(rect_zone[1].toString().padStart(3, ' '));

            $('#region_w').html(rect_zone[2].toString().padStart(3, ' '));
            $('#region_h').html(rect_zone[3].toString().padStart(3, ' '));
        })

        $('#accordionSpecifyZone').on('hide.bs.collapse', function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            enableDisableMouseEvent(true);
        })

        $('#accordionStartInference').on('show.bs.collapse', function (evt) {
            console.debug(evt.target.id + "() " + evt.type);

            captureImageCountSlider.addEventListener("input", function imageCountSliderHandler(evt) {
                var count = parseInt(evt.target.value);

                if (count == 0)
                {
                    captureImageCountSliderLabel.innerHTML = "Continuous"
                }
                else
                {
                    captureImageCountSliderLabel.innerHTML = evt.target.value;
                }
            })

            captureThresholdSlider.addEventListener("input", function thresholdSliderHandler(evt) {
                captureThresholdSliderLabel.innerHTML = evt.target.value;
                safetyDetectionThresholdSlider.value = evt.target.value;
                safetyDetectionThresholdLabel.innerHTML = evt.target.value;
                currentThreshold = parseInt(evt.target.value) / 100;
            })

            captureFrequencySlider.addEventListener("input", function frequencySpinnerHandler(evt) {
                captureFrequencySliderLabel.innerHTML = evt.target.value;
            })
        })

        $('#accordionStartInference').on('hide.bs.collapse', function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            captureThresholdSlider.removeEventListener("input", thresholdSliderHandler);
            captureFrequencySlider.removeEventListener("input", frequencySpinnerHandler);
            captureImageCountSlider.removeEventListener("input", imageCountSliderHandler);
        })

        $('#accordionSaveParameter').on('show.bs.collapse', function (evt) {
            console.debug(evt.target.id + "() " + evt.type);

            if ((currentDeviceId == undefined) || (currentModelId == undefined))
            {
                $('#captureSaveParameterBtn').prop('disabled', true);
                return;
            }

            $('#captureSaveParameterBtn').prop('disabled', false);
        })

        //
        // Tab
        //
        $('#tab-setup-label').on('show.bs.tab', function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
        })

        $('#tab-telemetry-label').on('show.bs.tab', async function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            var resultElementId = 'startSafetyDetectionBtnResult';
            var deviceListId = 'safetyDetectionDeviceIdList';

            if (document.getElementById(deviceListId).length == 0)
            {
                toggleLoader(false);
                // List empty.  Gather device list.
                await GetDevices(deviceListId, true, false, 'Select Device', '0', resultElementId)
                    .then((response) => {
                        if (response == false) {
                            // handle error?
                        }
                    })
                    .catch((err) => {
                    })
                    .finally(() => {
                        toggleLoader(true);
                    })
            }
            
            if (currentDeviceId != undefined) {
                setSelectOption('safetyDetectionDeviceIdList', currentDeviceId);
            }

            safetyDetectionImageCountSlider.addEventListener("input", function safetyDetectionThresholdLabel(evt) {
                var count = parseInt(evt.target.value);

                if (count == 0)
                {
                    safetyDetectionImageCountLabel.innerHTML = "Continuous"
                }
                else
                {
                    safetyDetectionImageCountLabel.innerHTML = evt.target.value;
                }
            })

            safetyDetectionThresholdSlider.addEventListener("input", function safetyDetectionFrequencyLabel(evt) {
                captureThresholdSlider.value = evt.target.value;
                    captureThresholdSliderLabel.innerHTML = evt.target.value;
                safetyDetectionThresholdLabel.innerHTML = evt.target.value;
                currentThreshold = parseInt(evt.target.value) / 100;
            })

            safetyDetectionFrequencySlider.addEventListener("input", function safetyDetectionImageCountLabel(evt) {
                safetyDetectionFrequencyLabel.innerHTML = evt.target.value;
            })
        })

        //
        // Change event
        //
        $('#captureDeviceIdList').on('change', async function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            var targetListId = evt.target.id;
            var modelListId = 'captureModelIdList';
            var deviceList = document.getElementById(targetListId);
            var resultElementId = 'captureImageBtnResult';

            if ((currentDeviceId == undefined) || (currentDeviceId != deviceList[deviceList.selectedIndex].value) || (document.getElementById(modelListId).length == 0)) {
                currentDeviceId = deviceList[deviceList.selectedIndex].value;
                toggleLoader(false);
                await GetModelForDevice(modelListId, currentDeviceId, resultElementId)
                    .then(async function(isDisconnected) {
                        deviceList[deviceList.selectedIndex].setAttribute("data-isDisconnected", isDisconnected);

                        if (isDisconnected == false)
                        {
                            // Make sure the device is not running inference.
                            await StopInference(null, true);
                        }
                        if (currentModelId != undefined) {
                            document.getElementById(modelListId).value = currentModelId;
                            document.getElementById(modelListId).dispatchEvent(new Event("change"));
                        }
                    })
                    .catch((err) => {
                        var resultElement = document.getElementById(resultElementId);
                        setResultElement(resultElement, "Failed to retrieve model list");
                    })
                    .finally(() => {
                        toggleLoader(true);
                    });
            }
        })

        $('#captureModelIdList').on('change', function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            var targetListId = evt.target.id;
            var deviceListId = 'captureDeviceIdList';
            var modelList = document.getElementById(targetListId);
            var deviceList = document.getElementById(deviceListId);

            if (modelList.selectedIndex > 0)
            {
                currentModelId = modelList[modelList.selectedIndex].value;
                disableUiElements(false);
            }
            else
            {
                disableUiElements(true);
            }

            if (deviceList.selectedIndex > 0 && modelList.selectedIndex > 0) {

                var isDisconnected = (deviceList[deviceList.selectedIndex].getAttribute("data-isDisconnected") === 'true');
                $('#captureImageBtn').prop('disabled', isDisconnected);
            }
        })

        $('#safetyDetectionDeviceIdList').on('change', async function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            var targetListId = evt.target.id;
            var modelListId = 'safetyDetectionModelIdList';
            var resultElementId = 'startSafetyDetectionBtnResult';
            var deviceList = document.getElementById(targetListId);

            currentDeviceId = deviceList[deviceList.selectedIndex].value;

            toggleLoader(false);
            await GetModelForDevice(modelListId, currentDeviceId, resultElementId)
                .then(async function(isDisconnected) {

                    var modelList = document.getElementById(modelListId);

                    deviceList[deviceList.selectedIndex].setAttribute("data-isDisconnected", isDisconnected);

                    if (modelList.selectedIndex > 0 && isDisconnected == false) {
                        $('#startSafetyDetectionBtn').prop('disabled', false);

                    } else {
                        $('#startSafetyDetectionBtn').prop('disabled', true);
                    }

                    // make sure the device is not running inference.
                    if (isDisconnected == false)
                    {
                        await StopInference(null, true);
                    }

                    if (currentModelId != undefined)
                    {
                        setSelectOption('safetyDetectionModelIdList', currentModelId);
                    }
                })
                .finally(() => {
                    toggleLoader(true);
                });
        })

        $('#safetyDetectionModelIdList').on('change', async function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            var deviceListId = 'safetyDetectionDeviceIdList';
            var modelListId = evt.target.id;
            var deviceList = document.getElementById(deviceListId);
            var modelList = document.getElementById(modelListId);
            currentModelId = modelList[modelList.selectedIndex].value;

            if (deviceList.selectedIndex > 0 && modelList.selectedIndex > 0) {

                var isDisconnected = (deviceList[deviceList.selectedIndex].getAttribute("data-isDisconnected") === 'true');
                $('#startSafetyDetectionWithImageBtn').prop('disabled', isDisconnected);
                $('#startSafetyDetectionBtn').prop('disabled', isDisconnected);
            }
        })
        //
        // button clicks
        //
        $('#captureDeviceIdListRefreshBtn').click(function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            var resultElementId = 'captureImageBtnResult';

            toggleLoader(false);
            var selectedVal = $('#captureDeviceIdList option:selected').val();

            GetDevices('captureDeviceIdList', true, false, 'Select Device', '0', resultElementId)
                .then(() => { 
                })
                .catch((err) => {
                })
                .finally(() => {
                    if (selectedVal != null && selectedVal.length > 0) {
                        console.debug(selectedVal);
                        $('select[name="captureDeviceIdList"]').val(selectedVal);
                    }
                    toggleLoader(true);
                })
        })

        $('#captureImageBtn').click(function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            var resultElementId = 'captureImageBtnResult';
            toggleLoader(false);

            ClearCaptureCanvas();
            CaptureSingleImage(resultElementId)
                .then((response) => {
                })
                .finally(() => {
                    toggleLoader(true);
                });
        })
        
        $('#captureStartInferenceBtn').click(function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            toggleLoader(false);
            StartInference('captureStartInferenceBtnResult')
                .then(() => { })
                .finally(() => {
                    disableUiElements(true);
                    $('#captureStopInferenceBtn').prop('disabled', false);
                    toggleLoader(true);
                });
        })

        $('#captureStopInferenceBtn').click(function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            toggleLoader(false);
            StopInference('captureStartInferenceBtnResult', true)
                .then(() => { })
                .finally(() => {
                    disableUiElements(false);
                    $('#captureStopInferenceBtn').prop('disabled', true);
                    toggleLoader(true);
                });
        })

        $('#safetyDetectionDeviceIdListRefreshBtn').click(function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            var resultElementId = 'startSafetyDetectionBtnResult';

            toggleLoader(false);
            var selectedVal = $('#captureDeviceIdList option:selected').val();

            GetDevices('safetyDetectionDeviceIdList', true, false, 'Select Device', '0', resultElementId)
                .then(() => {
                })
                .catch((err) => {
                })
                .finally(() => {
                    if (selectedVal != null && selectedVal.length > 0) {
                        console.debug(selectedVal);
                        $('select[name="captureDeviceIdList"]').val(selectedVal);
                    }
                    toggleLoader(true);
                })
        })

        $('#startSafetyDetectionBtn').click(async function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            toggleLoader(false);

            document.getElementById(evt.target.id).setAttribute("data-withImage", false);

            await StartSafetyDetection('startSafetyDetectionBtnResult', false)
                .then((bStarted) => { 
                    if (bStarted)
                    {
                        isSafetyDetectionRunning = true;
                        disableUiElements(true);
                        $('#stopSafetyDetectionBtn').prop('disabled', false);
                    }
                })
                .finally(() => {
                    toggleLoader(true);
                });
        })

        $('#startSafetyDetectionWithImageBtn').click(async function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            toggleLoader(false);

            document.getElementById(evt.target.id).setAttribute("data-withImage", true);

            await StartSafetyDetection('startSafetyDetectionBtnResult', true)
                .then((bStarted) => { 
                    if (bStarted)
                    {
                        isSafetyDetectionRunning = true;
                            disableUiElements(true);
                            $('#stopSafetyDetectionBtn').prop('disabled', false);
                        }
                })
                .finally(() => {
                    toggleLoader(true);
                });
        })


        $('#stopSafetyDetectionBtn').click(function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            toggleLoader(false);

            var withImage = (document.getElementById('stopSafetyDetectionBtn').getAttribute("data-withImage") === 'true');

            console.debug(`With Image ${document.getElementById('stopSafetyDetectionBtn').getAttribute("data-withImage")}`)
            StopInference('startSafetyDetectionBtnResult', withImage)
                .then(() => { })
                .finally(() => {
                    disableUiElements(false);
                    $('#stopSafetyDetectionBtn').prop('disabled', true);
                    toggleLoader(true);
                    isSafetyDetectionRunning = false;
                });
        })

        $('#captureSaveParameterBtn').click(function (evt) {
            console.debug(evt.target.id + "() " + evt.type);
            toggleLoader(false);
            SaveParameterToCookie()
                .then(() => { })
                .finally(() => {
                    toggleLoader(true);
                });
        })
        
        $('input[type=radio]').change(function(evt) {
            console.debug(evt.target.id + "() " + evt.type);
        });
    </script>
</body>